#ConcurrencyRefactorings
ConcurrencyRefactorings_update_imports=Update Imports
ConcurrencyRefactorings_type_error=type not resolvable
ConcurrencyRefactorings_field_compile_error=Compiler errors with the field to be refactored
ConcurrencyRefactorings_program_name=Analyzing the field
ConcurrencyRefactorings_empty_string=
ConcurrencyRefactorings_read_access=Read Access
ConcurrencyRefactorings_write_access=Write Access
ConcurrencyRefactorings_postfix_access=Postfix Access
ConcurrencyRefactorings_prefix_access=Prefix Access
ConcurrencyRefactorings_remove_synch_mod=Remove Synchronized Modifier
ConcurrencyRefactorings_remove_synch_block=Remove Synchronized Block
ConcurrencyRefactorings_unsafe_op_error_1=Cannot execute 
ConcurrencyRefactorings_unsafe_op_error_2=atomically. This would be required in converting 
ConcurrencyRefactorings_unsafe_op_error_3=. Consider using locks instead.
ConcurrencyRefactorings_comment=Comment
ConcurrencyRefactorings_read_and_write_access=Read and Write Access

#AtomicIntegerRefactorings
AtomicIntegerRefactoring_replace_if_statement_with_compare_and_set=Replace If Statement With Compare and Set
AtomicIntegerRefactoring_import=java.util.concurrent.atomic.AtomicInteger
AtomicIntegerRefactoring_descriptor_description=Convert ''{0}'' to AtomicInteger in ''{1}''
AtomicIntegerRefactoring_field_pattern=Field name: ''{0}''
AtomicIntegerRefactoring_searching_cunits=ConvertToAtomicInteger searching for compilation units
AtomicIntegerRefactoring_precondition_check=Convert to AtomicInteger: checking for preconditions...
AtomicIntegerRefactoring_atomic_integer=AtomicInteger
AtomicIntegerRefactoring_change_type=ChangeType
AtomicIntegerRefactoring_mapping_error=Convert to AtomicInteger cannot analyze selected field
AtomicIntegerRefactoring_compiler_errors=ConvertToAtomicInteger: Compiler errors
AtomicIntegerRefactoring_name=Convert int to AtomicInteger
AtomicIntegerRefactoring_create_changes=ConvertToAtomicInteger create changes
AtomicIntegerWizard_name=ConvertToAtomicInteger

#ConvertToFJTaskRefactoring
ConvertToFJTaskRefactoring_check_preconditions=Convert to ForkJoinTask checking preconditions
ConvertToFJTaskRefactoring_task_name=ConvertToForkJoinTask analyze preconditions
ConvertToFJTaskRefactoring_recursive_method=Reimplement recursive method to invoke the ForkJoinTask framework
ConvertToFJTaskRefactoring_recursive_action=Create RecursiveAction Subtype
ConvertToFJTaskRefactoring_generate_compute=generate compute() method
ConvertToFJTaskRefactoring_recursion_error=Cannot identify the base case for recursion. Maybe ''{0}'' is not a recursive divide-and-conquer.
ConvertToFJTaskRefactoring_scenario_error=Scenario not handled yet: recursive method call is within
ConvertToFJTaskRefactoring_analyze_error=Convert to ForkJoinTask cannot analyze selected method ''{0}''
ConvertToFJTaskRefactoring_compile_error=Convert to ForkJoinTask compile errors
ConvertToFJTaskRefactoring_compile_error_update=ConvertToForkJoinTask compiler errors update
ConvertToFJTaskRefactoring_name_user=Convert Recursive Method to ForkJoinTask
ConvertToFJTaskRefactoring_create_changes=ConvertToForkJoinTask create changes
ConvertToFJTaskRefactoring_name_official=Convert to ForkJoinTask
ConvertToFJTaskRefactoring_sequential_req=Sequential Threshold is Mandatory
ConvertToFJTaskRefactoring_descriptor_description=Convert ''{0}'' to ForkJoinTask in ''{1}''
ConvertToFJTaskRefactoring_method_pattern=Method name: ''{0}''
ConvertToFJTaskRefactoring_unavailable_operation=This operation is unavailable at this time.  Please select a recursive method.
ConvertToFJTaskRefactoring_parameter_error=Unknown parameter type
ConvertToFJTaskRefactoring_comment_warning=Comment(s) will be lost in ''{0}''
ConvertToFJTaskRefactoring_method_body_error=''{0}'' has no body.
ConvertToFJTaskRefactoring_statement_error=''{0}'' does not have enough recursive statements to convert.
ConvertToFJTaskRefactoring_node_location_error=''{0}'' is not contained in a block.
ConvertToFJTaskRefactoring_switch_statement_error=''{0}'' contains switch statements which are not supported at this time.
ConvertToFJTaskRefactoring_block_error=Problem with block creation.
ConvertToFJTaskRefactoring_multiple_block_error=Recursive calls are across multiple blocks.  Unable to determine proper behavior.
ConvertToFJTaskRefactoring_action_name=Convert recursion to ForkJoinTask...
ConvertToFJTaskRefactoring_no_change_error=Unable to convert ''{0}'' to ForkJoinTask due to unsupported patterns.

AtomicIntegerRefactoring_java_model_exception_rename=Java Model Exception: rename field
AtomicIntegerRefactoring_rename_okay=rename OK
AtomicIntegerWizard_name=ConvertToAtomicInteger
Integer_type_signature=I
AtomicInteger_set=set
AtomicInteger_get=get
AtomicInteger_getAndIncrement=getAndIncrement
AtomicInteger_getAndDecrement=getAndDecrement
AtomicInteger_incrementAndGet=incrementAndGet
AtomicInteger_decrementAndGet=decrementAndGet
AtomicInteger_addAndGet=addAndGet
AtomicInteger_compareAndSet=compareAndSet
AtomicInteger_todo_comment_op_cannot_be_executed_atomically=// TODO The operations below cannot be executed atomically.
AtomicInteger_todo_comment_op_cannot_be_executed_atomically_nl=// TODO The operations below cannot be executed atomically.\n
AtomicInteger_todo_comment_statements_not_properly_synchronized=// TODO The statements below are not properly synchronized.
AtomicInteger_todo_comment_statements_not_properly_synchronized_block=// TODO The statements in this block are not properly synchronized.
AtomicInteger_todo_comment_statements_not_properly_synchronized_method=// TODO The statements in the method below are not properly synchronized.
AtomicInteger_todo_comment_return_statement_could_not_be_executed_atomically=// TODO Return statements with assignments cannot be refactored into atomic operations.
AtomicInteger_warning_cannot_remove_synch_mod_return_assignment=Synchronized method contains a return statement with an assignment. Cannot remove the synchronized modifier without introducing an unsafe thread environment.
AtomicInteger_warning_cannot_remove_synch_block_return_assignment=Synchronized block contains a return statement with an assignment. Cannot remove the synchronized block without introducing an unsafe thread environment.
AtomicInteger_statement=The statement 
AtomicInteger_warning_cannot_execute_statement_atomically= cannot be executed atomically.
AtomicInteger_warning_cannot_be_refactored_atomically= cannot be refactored into an atomic operation.
AtomicInteger_unsafe_operator_warning1=Cannot execute 
AtomicInteger_unsafe_operator_warning2=.set(
AtomicInteger_unsafe_operator_warning3=.get())
AtomicInteger_unsafe_operator_warning4=atomically. This would be required in converting 
AtomicInteger_unsafe_operator_warning5=. Consider using locks instead.
AtomicInteger_warning_side_effects1=Synchronized block contains side effects. 
AtomicInteger_warning_side_effects2= Cannot remove the synchronized block because 
AtomicInteger_warning_side_effects3=the statement '
AtomicInteger_warning_side_effects4=' will have side effects once refactored. Consider using locks instead.
AtomicInteger_warning_two_field_accesses=Synchronized block contains references to another field "
AtomicInteger_warning_two_field_accesses2=". AtomicInteger cannot preserve invariants over two field accesses, consider using locks instead.
AtomicInteger_error_side_effects_on_int_field_in_assignment=Cannot refactor the statement 
AtomicInteger_error_side_effects_on_int_field_in_assignment2= because there are side effects on the integer field on the right side of this assignment. Consider factoring out the problematic expression: 
